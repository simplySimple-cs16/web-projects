SECTION 2&3 : HTML
  - devdocs.io -> website for good reference
  - <br> : line break for newline
  - <hr> : for horizontal line
  - html tag = element + attribute
  - <center> </center> : to center contents
  **Project 1 : HTML-Personal Website
    -unicode-table.com : good resource for character and emojis
    -meta<name='description' content='this is what will appear in the search results for ur Website'>
    -<p> : for paragraphs
    - <i> vs <em> : for italicising better use <em>
    - <b> vs <strong> : for bold better use <strong>
    - <ul> and <ol> ,<li> for HTML list
    - <img src="" alt=""> : for adding images
    - https://crop-circle.imageonline.co/ : for circular image cropping online
    - <a href="">Text to display </a> for links
    - table structure : head, body and foot and inside them tr for new row and th & td for cell in each tr no column in
      html table
    - we can use HTML also for structuring our website LAYOUT but css is recommended.
    - HTML forms.... label, input, textarea
==================================================================================================================================

SECTION 4&5: CSS
  **Project 1 Continued
    - Inline css : css code within [the same html file : INCORRECT] a tag i.e as an attribute to an HTML element
    - https://colorhunt.co/ : Color Palettes for Designers and Artists
    - https://developer.mozilla.org/en-US/docs/Web/CSS/color_value : color hex values and their names
    - Internal CSS : css code within the head section of the HTML file and applies for selected tags
    - overriding default browser css value for hr
    - External CSS : css code lies in another file than the html file
    - link for linking stylesheet
    - CSS types priority :
        -first: Inline
        -second: Internal
        -third: External
    - CSS sytax:
        selector{proerty:value;}
    - advisable to list css proerties in alphabetical order so that the debugging process is easier
    - css selectors in order of increasing priority:
        -element selector: for eg h1,h2{}
        -class selector: .className{}
            -a html tag can have more than one class.
                eg: <img class="a b" src=""/>
            -more than one html tag can have the same class name.
                eg: <h1 class="a"> hi </h1>
                    <h3 class="a"> hi </h3>
        -id selector: #idName{}
            -a html tag cannot have more than one id.
            -a id name can be used only once
        -pseudo class selector:
            -detect changes in HTML state and apply css properties accordingly. For eg. the state of being hovered or not
            -eg:
              img:hover{
                background-color:red;
              }
              -change the color of image to red when hovered
      - https://www.favicon.cc/ : for creating fav icons
  **Project 2 : CSS - My Site
    - HTML div for dividing HTML ELEMENT into sections
    - box model : border, margin and padding concept
    - border : solid 10px; //shortcut for specicifying border type and size
    - CSS display properties:
        -block
          -block element takes up the whole WIDTH of the screen
          -block elements: h1,p
          -width can be changed.
          -elements are on new line
        -Inline
          -take up width only to the size of the element.
          -Inline elements : span,<a>
          -elements can be in the same line
          CAN't change the width.
        -inline-block
          -best of both worlds
          -element are on the same line and thier width can be changed too.
          - eg : <img>
        -none
          - make the element disappear.
          - helps in hiding things
          - same thing can be achieved by visibility: ; property
    - block can be change to inline and vice-versa using css display: ; property
    - <span> : for sections within an HTML ELEMENT. It's an inline display element.
    - CSS positioning:
        -content is everything: height of box is that always of the content.Width of box may not be same i.e block or inline
        -HTML code determines the order of things displayed
        -children sit on top of parent:
          eg. <div>
                <h1> I am <span>Kadum Perme</span> </h1>
              <div>
              on screen, first div will be rendered, than h1 and than span.
        - POSITIONING:
            1. Static
            2. Relative //position:relative;
                - then coordinates can be used. i,e top,bottom,left,right : ;
                - relative to where the element should have been positioned earlier before adding coordinates.
            3. Absolute
                - relative to the parent of the element.
            4. Fixed
                - stay on the same position on screen and scrolling doesn't have any effect on the position of fixed element
      - Two ways of centering things:
          1. using text-align:; in parent.
          2. using margin: 0 auto;//for horizontal centering
                   margin: auto 0;  //for vertical centering
      - WEB DESIGN PRINCIPLES:
          1. Colour Theory
              -https://color.adobe.com/create/color-wheel : for selecting different combinations of colour palette.
              -https://colorhunt.co/ : for colour palette by designers.
          2. Typography
          3. UI(user interface) Design
              Principles:
                1.Hierarchy
                2.Layout
                3.Alignment
                4.Whitespace
                5.Audience
          4. UX(user experience) Design
              Principles:
                1.Simplicity
                2.Consistency
                3.Reading Pattern(F or Z)
                4.All platform design
                5.Don't use your power for evil
          - https://www.dailyui.co/ : for becoming a better ui designer in 100 days
          - https://collectui.com/ : for amazing UI designs
          - https://www.canva.com/ : for designing designs from scratch online

      - Fonts
          -https://www.cssfontstack.com/ : for series of fallbacks, i.e if one font doesn't work then one of the other in the list
            should work
          - if u think other people should view the same font u r using inspite of them not having the font type in their
            system then go for font embedding, i.e google fonts.
          -CSS Font Sizing:
            100% = 1em = 16px
            - em and % inherit from their parent i.e if parent is 2em and child is specified to be 5em than the
              child is actually of 2x5 = 10em in size. But it does not happen with px.
            - rem : doen't inherit from parent(recommended)
      - https://www.flaticon.com/ : website for icons
      - https://giphy.com/ : for animated images
      - float: ; property of images make them to be placed left, right etc wrt to texts around.
      - clear: ; anti float property for texts. Don't allow them to wrapped around floatted imgs rather placed the
        texts beneath the imgs.
      - float should not be used for positioning and should be used only for wrapping elements over other
        elements.
      - https://cssbuttoncreator.com/ : for creating personalised buttons.
      - https://www.frontendmentor.io/ : for solving and practicing frontend designs.
====================================================================================================================================

SECTION 6&7: BOOTSRAP
- https://www.codeply.com/ : like codepen but with front-end libraries like bootstrap, angular and react.
- Workflow of web-design:
    1.Looking other people's websites : https://www.awwwards.com/
    2.Looking at some UI patterns : https://ui-patterns.com/
    3.Creating a simple wireframe sketch of ur website using pen and paper
        -download & printout : https://sneakpeekit.com/
    4.Optional Step : create a mockup using photoshop
    5.Optional : prototype
- design inspiration : https://dribbble.com/
** Project 3: TinDog
  - NAVBAR:
      -https://getbootstrap.com/docs/4.5/components/navbar/
      -https://www.udemy.com/course/the-complete-web-development-bootcamp/learn/lecture/12288048#questions/11233661
  - Grid Layout:
      - one row have 12 columns. That means if u specify the class of a column inside a row as col-6 it will take 50% of the
        screen
  - Containers
  - Buttons and using fontawesome icons inside these buttons.
  - how to increase fontawesome icon size ie by adding fa-4x in <i>.
  - option+drag : multiple cursor
  - to make any image or anything just change their width.
  - BOOTSTRAP CAROUSEL: for including slider option for slide show.
  - BOOTSRAP CARDS: header, body and footer in a smaller box.
  - CSS z-index:; : for stacking order of elemenets. It detrmines which element should be closer or far away
    from the screen. Every element has a default z-index of 0.
    - z-index doesn't apply to an element until and unless it is positioned absolute or relative or fixed.
  -https://search.google.com/test/mobile-friendly : for checking if ur website is mobile friendly.
