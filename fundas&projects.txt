SECTION 2&3 : HTML
  - devdocs.io -> website for good reference
  - <br> : line break for newline
  - <hr> : for horizontal line
  - html tag = element + attribute
  - <center> </center> : to center contents
  **Project 1 : HTML-Personal Website
    -unicode-table.com : good resource for character and emojis
    -meta<name='description' content='this is what will appear in the search results for ur Website'>
    -<p> : for paragraphs
    - <i> vs <em> : for italicising better use <em>
    - <b> vs <strong> : for bold better use <strong>
    - <ul> and <ol> ,<li> for HTML list
    - <img src="" alt=""> : for adding images
    - https://crop-circle.imageonline.co/ : for circular image cropping online
    - <a href="">Text to display </a> for links
    - table structure : head, body and foot and inside them tr for new row and th & td for cell in each tr no column in
      html table
    - we can use HTML also for structuring our website LAYOUT but css is recommended.
    - HTML forms.... label, input, textarea
==================================================================================================================================

SECTION 4&5: CSS
  **Project 1 Continued
    - Inline CSS : css code within [the same html file : INCORRECT] a tag i.e as an attribute to an HTML element
    - https://colorhunt.co/ : Color Palettes for Designers and Artists
    - https://developer.mozilla.org/en-US/docs/Web/CSS/color_value : color hex values and their names
    - Internal CSS : css code within the head section of the HTML file and applies for selected tags
      it can be declared at anywhere but the position matters basically we want our css to load before HTML
    - overriding default browser css value for hr
    - External CSS : css code lies in another file than the html file
    - link for linking stylesheet
    - CSS types priority :
        -first: Inline
        -second: Internal
        -third: External
    - CSS syntax:
        selector{proerty:value;}
    - advisable to list css proerties in alphabetical order so that the debugging process is easier
    - css selectors in order of increasing priority:
        -element selector: for eg h1,h2{}
        -class selector: .className{}
            -a html tag can have more than one class.
                eg: <img class="a b" src=""/>
            -more than one html tag can have the same class name.
                eg: <h1 class="a"> hi </h1>
                    <h3 class="a"> hi </h3>
        -id selector: #idName{}
            -a html tag cannot have more than one id.
            -a id name can be used only once
        -pseudo class selector:
            -detect changes in HTML state and apply css properties accordingly. For eg. the state of being hovered or not
            -eg:
              img:hover{
                background-color:red;
              }
              -change the color of image to red when hovered
      - https://www.favicon.cc/ : for creating fav icons
      - webkit-liner-gradient : for creating easily as in section 22

  **Project 2 : CSS - My Site
    - HTML div for dividing HTML ELEMENT into sections
    - box model : border, margin and padding concept
    - border : solid 10px; //shortcut for specicifying border type and size
    - CSS display properties:
        -block
          -block element takes up the whole WIDTH of the screen
          -block elements: h1,p
          -width can be changed.
          -elements are on new line
        -Inline
          -take up width only to the size of the element.
          -Inline elements : span,<a>
          -elements can be in the same line
          CAN't change the width.
        -inline-block
          -best of both worlds
          -element are on the same line and thier width can be changed too.
          - eg : <img>
        -none
          - make the element disappear.
          - helps in hiding things
          - same thing can be achieved by visibility: ; property
    - block can be change to inline and vice-versa using css display: ; property
    - <span> : for sections within an HTML ELEMENT. It's an inline display element.
    - CSS positioning:
        -content is everything: height of box is that always of the content.Width of box may not be same i.e block or inline
        -HTML code determines the order of things displayed
        -children sit on top of parent:
          eg. <div>
                <h1> I am <span>Kadum Perme</span> </h1>
              <div>
              on screen, first div will be rendered, than h1 and than span.
        - POSITIONING:
            1. Static
            2. Relative //position:relative;
                - then coordinates can be used. i,e top,bottom,left,right : ;
                - relative to where the element should have been positioned earlier before adding coordinates.
            3. Absolute
                - relative to the parent of the element.
            4. Fixed
                - stay on the same position on screen and scrolling doesn't have any effect on the position of fixed element
      - Two ways of centering things:
          1. using text-align:; in parent.
          2. using margin: 0 auto;//for horizontal centering
                   margin: auto 0;  //for vertical centering
      - WEB DESIGN PRINCIPLES:
          1. Colour Theory
              -https://color.adobe.com/create/color-wheel : for selecting different combinations of colour palette.
              -https://colorhunt.co/ : for colour palette by designers.
          2. Typography
          3. UI(user interface) Design
              Principles:
                1.Hierarchy
                2.Layout
                3.Alignment
                4.Whitespace
                5.Audience
          4. UX(user experience) Design
              Principles:
                1.Simplicity
                2.Consistency
                3.Reading Pattern(F or Z)
                4.All platform design
                5.Don't use your power for evil
          - https://www.dailyui.co/ : for becoming a better ui designer in 100 days
          - https://collectui.com/ : for amazing UI designs
          - https://www.canva.com/ : for designing designs from scratch online

      - Fonts
          -https://www.cssfontstack.com/ : for series of fallbacks, i.e if one font doesn't work then one of the other in the list
            should work
          - if u think other people should view the same font u r using inspite of them not having the font type in their
            system then go for font embedding, i.e google fonts.
          -CSS Font Sizing:
            100% = 1em = 16px
            - em and % inherit from their parent i.e if parent is 2em and child is specified to be 5em than the
              child is actually of 2x5 = 10em in size. But it does not happen with px.
            - rem : doen't inherit from parent(recommended)
      - https://www.flaticon.com/ : website for icons
      - https://giphy.com/ : for animated images
      - float: ; property of images make them to be placed left, right etc wrt to texts around.
      - clear: ; anti float property for texts. Don't allow them to wrapped around floatted imgs rather placed the
        texts beneath the imgs.
      - float should not be used for positioning and should be used only for wrapping elements over other
        elements.
      - https://cssbuttoncreator.com/ : for creating personalised buttons.
      - https://www.frontendmentor.io/ : for solving and practicing frontend designs.
====================================================================================================================================

SECTION 6&7: BOOTSRAP
- https://www.codeply.com/ : like codepen but with front-end libraries like bootstrap, angular and react.
- Workflow of web-design:
    1.Looking other people's websites : https://www.awwwards.com/
    2.Looking at some UI patterns : https://ui-patterns.com/
    3.Creating a simple wireframe sketch of ur website using pen and paper
        -download & printout : https://sneakpeekit.com/
    4.Optional Step : create a mockup using photoshop
    5.Optional : prototype
- design inspiration : https://dribbble.com/
** Project 3: TinDog
  - NAVBAR:
      -https://getbootstrap.com/docs/4.5/components/navbar/
      -https://www.udemy.com/course/the-complete-web-development-bootcamp/learn/lecture/12288048#questions/11233661
  - Grid Layout:
      - one row have 12 columns. That means if u specify the class of a column inside a row as col-6 it will take 50% of the
        screen
  - Containers
  - Buttons and using fontawesome icons inside these buttons.
  - how to increase fontawesome icon size ie by adding fa-4x in <i>.
  - option+drag : multiple cursor
  - to make any image or anything just change their width.
  - BOOTSTRAP CAROUSEL: for including slider option for slide show.
  - BOOTSRAP CARDS: header, body and footer in a smaller box.
  - CSS z-index:; : for stacking order of elemenets. It detrmines which element should be closer or far away
    from the screen. Every element has a default z-index of 0.
    - z-index doesn't apply to an element until and unless it is positioned absolute or relative or fixed.
  -https://search.google.com/test/mobile-friendly : for checking if ur website is mobile friendly.
  - CSS Media Query : change css properties according to certain conditions like screen size, when printing or
      during speech.
      -@media <type> <feature> and <feature>
      -eg: @media screen (max-width : 900px){
          h1{
              color:red;
          }
      }
      --> for all displays with screen size of 900px width or lesser all h1 should be coloured red.
  - page sections can be navigated using href to that section ID.
  - Code Refactoring:
     1.Readability
     2.Modularity
     3.Efficiency
     4.Length
  - Combining CSS selectors :
    1.Multiple Selectors:
      - selector1, selector2 {

      }
      -eg: h1, h2, h3 {

      }
    2.Hierarchical Selectors:
      - selector1 selector2{

      }
      - selector1 is parent of selector2.
      - eg .container-fluid h1 {

      }
        --> Apply the css properties to only those h1 which are inside container-fluid class and not outside.
    3.Combined selector:
      -selector1selector2{} //no space
      -works for selectors at the SAME HTML TAG.
      - eg: <div class="name"> </div>
        div.name{}
        --> apply the css properties to only those divs who has a direct [not child] class name of 'name'.
==============================================================================================================================

SECTION 8-13: Javascript
  - Data Types:
    1.string
    2.number
    3.boolean
  - alert(''); -> for printing to the screen
  - prompt('message'); -> for asking input from the user
  - Javascript variable naming convention:
      1. Can't start with number.
      2. Can't be a keyword
      3. Can't contain spaces.
      4. CAN only contain aA, 123, _ and $
  - strings can be concatenated by +
  - string slice :
    s.slice(start, end); -> start index is included but end is not included
  - change all characters in string to upper case or lower case:
      - word.toUpperCase();
        word.toLowerCase();
  - Math.random(); -> generates a number which is >=0 but <1
      - if u need a whole number betwee 1 and n:
          var number = Math.floor(Math.random()*n) + 1;
  - conditionals:
      if(){

      }
      else if(){

      }
      else{

      }
  - Comparators:
      === : equal to
      !== : not equal to
      >   : greater
      <   : lesser
      >=  : greater than or equal to
      <=  : lesser than or equal to
      ==  : similar to === but neglects the data types of the operands i.e 1 == "1" -> true
  - arrays:
    var arrName = [n1,n2,n3];
    - arr.includes('elementName'); -> returns true if in array else false
    - arr.push('elName'); ->push the element at the end of the array
    - arr.pop; -> pop the last element from the array
  - loops:
    - var i=0;
      while(i<n){
        .....
        i++;
      }
    - for(var i=0;i<n;i++){
        ......
      }
    - var numbers = [1,2,5,6,7];
      numbers.forEach(function(number){
      console.log(number);
      });
      ->1 2 5 6 7
  - www.draw.io : for drawing flowcharts
  - Javascript Types(same as CSS):
    1.Inline:
      eg: <body onload="alert('Hi dear!');"> </body>
    2.Internal: it can be declared at anywhere but the position matters
      eg: <body>
              <srcipt type="text/javascript">
                  alert("Hello world!");
              </script>
          </body>
    3. External: Separate file for javascript code
      - link to javascript script file has to be placed at the bottom as opposite to css because if we place it
        at the top then sometimes we are already selecting an element that does not exist till now.
  - HTML - DOM(Document Object Model)
      Every HTML element is actually an object which can be selected and manipulated(i.e properties like colors
      methods like checking a input check box)
  - Selecting HTML element by using javascript:
      1. document.querySelector("h1 or #id or .className or combinedSelectors"); -> return a single element
          and the first one incase of multiple elements.
      2. document.querySelectorAll("h1 or #id or .className or combinedSelectors"); -> return array of elements
      3. document.getElementsByTagName(""); -> returns array of tags
      4. document.getElementsByClassName(""); -> returns array of classes.
      5. document.getElementByID(""); -> returns a single id.
  - CSS naming convention : - between Words.
    Javascript naming convention : Camel Casing.
  - How to NOT use javascript for doing css jobs:
      1. document.querySelector().classList.add(".className"); //className can be defined in the css file
      2. document.querySelector().classList.remove(".className");
      3. document.querySelector().classList.toggle(".className");
  - .innerHTML() -> applies to all the html element inside the tag selected
    .textContent() -> applies to only the text and neglects other html elements inside the tag selected.
  - Manipulating the html Attributes of html Tag:
        document.querySelector("tagElementName").attributes;
        document.querySelector("tagElementName").getAttribute("href");
        document.querySelector("tagElementName").setAttribute("href","https://kadum.in");
  == Dicee Challenge:
      Applied concept of random number and document.querySelectorAll()[].setAttribute(,);
  **Project 4 : Drum Kit
      - Adding .addEventListerner() to a button.
      - U don't call ur javascript function in addEventListerner() but instead pass it as a parameter to addEventListerner()
        by not including the parenthesis
          eg: document.querySelectorAll(".drum")[i].addEventListener("click", functionName);
          document.querySelectorAll(".drum")[i].addEventListener("click", functionName()); -> this will not wait
          for the event to happen which is click here instead it will directly execute the function.
        - or we can define an ANONYMOUS function directly as the parameter of addEventListener();
          eg: document.querySelectorAll(".drum")[i].addEventListener("click", function(){

          });
      - How to use debugger in chrome developer tools
         1. type "debugger;"
         2. press shift + enter
         3. call ur function which u want to debug.
         4. press enter
      - Higher Order Functions : Functions that take functions as arguments or parameters.
      - this -> for getting the html tag responsible for the event to happen which was detected by addEventListener()
      - javascript object :
          var boy1 = {
          name : "Kadum",
          age : 21,
          languages : ["Adi","English","Hindi"],
          isSingle : true
          }
          boy1.name; -> "Kadum"
      - javascript constructor function (similar to class):
        function Boy(name,age,languages,isSingle){ //Function name MUST START WITH A CAPITAL LETTER
          this.name = name;
          this.age = age;
          this.languages = languages;
          this.isSingle = isSingle;
        }
        eg : var boy2 = new Boy("Terbi",21,["galo"],false);
      - used javascript switch case
      - including methods to an object:
          function Boy(name,age,languages,isSingle){ //Function name MUST START WITH A CAPITAL LETTER
            this.name = name;
            this.age = age;
            this.languages = languages;
            this.isSingle = isSingle;
            this.work = function( .... ){};
          }

          var boy3 = new Boy(.....);
          boy3.work(); --> use parenthesis for executing a function.
      - learn to detect which key was pressed in the keyboard i.e event listener for the keyboard.
      - callback function funda
          function (param1){
          .....
          }
          param1 causes the function to be called which is also called event.
          eg:
          document.addEventListener("keypress", function(event) {

            makeSound(event.key);

            buttonAnimation(event.key);

          });
          --> event is responsible for the listener to take its action.
      - remember callback function are not called by the user but by the system
      - More about callbacks : Lecture 180 : https://www.udemy.com/course/the-complete-web-development-bootcamp/learn/lecture/12384168#questions
      - setTimeout(function() {...}, 100); -> javascript fn to run the function after 100 mSeconds.
============================================================================================================================================================

- SECTION 14&15 : JQUERY : The javascript library that prevents our fingers from  breaking.
  - jquery CDN should be placed ABOVE the javascript srcipt src. Else jquery won't be applied to ur website.
  - if u want to put ur jquery and javascript src links in the head section of the html file then enclose
    all of ur javascript code in .js file by :
      $.(document).ready(function (){
          ....write ur js code here
        }); -> this line check if ur html object are ready then apply the javascript.
  - $("") === document.querySelectorAll("")
  - Manipulating styles with jquery:
      - $("h1").css("color"); -> return color of h1
      - $("h1").css("color","green"); -> set color to green
      - $("h1").addClass("classnName") === document.querySelector().classList.add(".className"); // no "." in className
      - $("h1").removeClass("classnName");
      - $("h1").addClass("classnName1 className2") -> adding multiple classes
      - $("h1").hasClass("classnName"); -> return true or false depending if class is present or not.
      - $("h1").text("Updated"); -> to change only the text inside the h1 tags.
      - $("h1").html("<em>Emphasised</em>"); -> to change the inner html inside h1 tags.
      - $("img").attr("src"); -> getting an attribute.
      - $("a").attr("href","www.yahoo.com"); ->setting an  attribute, classes can also be changed by this method.
      - Adding event listener:
        $("h1").click(function(){
          $("h1").css("color","green");
        });
        -> this applies to all the h1 and we don't have to use a loop to do that like in javascript.
      - adding event listerner for keyboard key press:
        $("input").keypress(function(event){
          console.log(event.key);
        });
      - MOST FLEXIBLE WAY OF ADDING EVENT LISTENER:
          $("h1").on("click",function(){

          });
      - adding and removing HTML elements:
        1. $("h1").before("<button>New</button>");
          ->what it does:
             <button>New</button> <h1>Hello</h1>

        2. $("h1").after("<button>New</button>");
           ->what it does:
              <h1>Hello</h1> <button>New</button>
        3. $("h1").prepend("<button>New</button>");
          ->what it does:
            <h1>  <button>New</button> Hello</h1>
        4. $("h1").append("<button>New</button>");
           ->what it does:
            <h1>Hello  <button>New</button> </h1>
        5. $("button").remove();
      - Website animations with jQuery:
        .hide()
        .show()
        .toggle()
        .fadeOut()
        .fadeIn()
        .fadeToggle()
        .slideUp()
        .slideDown()
        .slideToggle()
        -for custom css animations:
          .animate({
            opacity: 0.5 -> THIS VALUE MUST BE NUMERIC I.E POPERTIES LIKE COLOR:RED WILL NOT WORK.
            //margin : "20%" -> this will work too.
          })
        - combination of animations:
          $("h1").slideUp().slideDown().animate({opacity:0.5});

   *SIMON CHALLENGE:
      - Applied every concept of jquery.
      - conditional statements revisited.
=============================================================================================================================================

- SECTION 16 : THE UNIX COMMAND LINE
  - ls = list all files in a directory
  - cd .. =  one directory back
  - option + click = to position ur cursor at anywhere. Useful incase of long command.
  - ctrl + a = goes to beginning of command
  - ctrl + e = goes to end of a command
  - ctrl + u = clears an entire line
  - mkdir newDirectory = for making new folders
  - touch newFile.txt = for making new files
  - touch file1.html file2.js = for making multiple files
  - open newFile.txt = for opening the file with the default application.
  - open -a Atom newFile.txt = for opening file with an application.
  - pwd = print working directory.
  - rm * = removes everything in a directory
  - atom . = for opening the current folder in atom
  - u can drag and drop a folder in terminal to get its full path.
=============================================================================================================================================

SECTION 18 : NODE.JS
- how to run a .js file:
    node fileName.js
- Node REPL - Read Evaluation Print Loop : allow the terminal to run js code like the chrome developer tool console.
- How to use node REPL:
    node
- how to list all the possible commands after typing few initials:
  double tab
- how to exit REPL:
  .exit
  or double ctrl+c
- learn how to use node modules : especially the fileSystem
    //jshint esversion:6 -> this comment is for removing warnings that tells u that commands used are for higher
    version of js
    const fs = require("fs");
    fs.copyFileSync("originalFile.txt","copiedFile.txt");
- npm : Node Package Manager - for using External Node Modules.
- how to use npm:
  1. In the same directory of your .js file or inside ur project folder type:
      node init
  2. fill up all the necessary details
  3. npm install npmPackageName
     npm i npmPackageName

  ====================================================================================================================

  SECTION 19: EXPRESS.JS WITH NODE.JS
  - As jquery is to javascript so is express to node.
  - nodemon : npm package that automatically restarts ur server when something changes.
      - rs -> nodemon command to restart the server forcefully
  - __dirname : should be used for safety before ur file paths. It is basically the pwd
  - body-parser : npm package to work with html variables which are posted to the server
  - we can have only one res.send for app.get but multiple res.write
  =====================================================================================================================

  SECTION 20: APIs
  - Things to include when dealing with APIs:
      1.Endpoint
      2.Paths
      3.Parameters
      4.Authentication
  - Postman app : app for getting API results in a structured way as compared to the browser.
    Postman is a collaboration platform for API development. Postman's features simplify each
    step of building an API and streamline collaboration so you can create better APIs—faster.
  - JSON.parse(data) -> converts json data in any format i.e. hexadecimal or string into
    javascript OBJECT.
  - JSON.stringify(JsObj) -> converts JS object into JSON string.

  *** Newsletter-Signup :  A simple app for collecting emails using remote server
    - Learn how to use Mailchimp API and use heroku server for app hosting.
    - app.use(express.static("public")); -> to use static files in ur project under the
      folder name "public." Comes in handy when ur website is using css and images alongside
      ur main html page.
    - process.env.PORT -> for a dynamic port for remote servers to listen to
    - process.env.PORT||3000 -> TO let the app work both remotely and locally
    - to check errors regarding app hosting in heroku servers:
        'heroku logs' in your terminal
    - whenever u want to update the changes made locally to the heroku server:
       git add .
       git commit -m "new update"
       git push heroku master
===================================================================================================================

SECTION 21: GIT, GITHUB AND VERSION CONTROL
- git init -> to incorporate git in any folder
- git add fileName -> adding a file to status area
- git add . ->adding every thing inside a folder to staging area
- checking what files are staged or not: git status
- git rm --cached -r . -> removing ever from staging area
- git commit -m "ur messgae" -> adding a savepoint or checkpoint or commit
- git log -> To see the checkpoints or commits
- GIT METHODOLOGY:
  1. WORKING DIRECTORY -->git add-->STAGING AREA-->git commit-->LOCAL REPOSITORY OR STORAGE-->git push-->REMOTE REPO
  2. LOCAL REPOSITORY OR STORAGE-->git checkout-->PREVIOUS VERSION OR STATE OF THE GIT FOLDER
- to see the difference between the current and just previous version of a file:
  git diff filename
- to rollback to the just previous v ersion of a file:
  git checkout fileName
- how to add a local repository to a remote repo in github:
  1. Create a repo in github.
  2. In terminal: git remote add origin remoteRepoURL //origin is the name of the remote repo and it
      can be given other name.
  3. git push -u origin master: pushing ur main BRANCH of local repo to the remote repo
- GITIGNORE: IF YOU DON'T WANT SENSITIVE FILES SUCH AS PASSWORDS AND API KEYS TO BE
              UPLOADED TO GITHUB.
              -and also files that are useless for other users like .DS_Store files
              which manages how files should look or arranged inside a folder.
    1. Remove everything from staging area : git rm --cached -r .
    1. Create a file name .gitignore
          touch .gitignore
    2. Open it : open .gitignore
    3. Inside it write all the files in separate new lines which u don't want to commit or upload to github
    Rules in .gitignore file:
      1. # -> for line comment
      2. *.txt -> means ignore every .txt type files
    4. git add . and now u don't see ur ignored files in staging area
    5. git commit -m "ur message"
    https://github.com/github/gitignore : template for git ignore for various type of projects
  - CLONING : Fetching remote repository to local device
    - git clone remoteRepoURL -> for cloning the remote repository to ur local device

  -BRANCHING:
    - git branch branchName -> to create a new branch other than the master
    - git branch -> to list all the branches
    - git checkout bracnhName -> to switch branch
    - MERGING:
      - to merge another branch to the master:
        1. git checkout master
        2. git merge branchName
              - write a merge message in the vim
              - :q! -> to exit vim
    - PULL REQUEST: request to merge branch to another branch.
        - if u want to pull request to merge branch 2 to branch 1 then u have to be in ur branch 1
          and then pull request to merge branch 2 to branch 1 ie pulling changes from branch 2 to 1.
        - It is a feature in GITHUB to facilitate git merge functionality as in CLI git.

  - COLLABORATION USING REMOTE REPOSITORIES:
      - FORKING : To make a copy of a remote repo so that u can edit it now.
      - U can clone a forked repo in ur local device so that u can work it upon locally.
      - finally when u r satisfied and want to incorporate ur changes to the original repository, then
        first u have to push from local to the forked repo and then CREATE A PULL REQUEST TO THE ORIGINAL REPO
         TO ACCEPT YOUR EDITTED FORKED REPO.
================================================================================================================================================

SECTION 22 : EJS [EMBEDDED JAVASCRIPT TEMPLATING]
  - Templating : Incorporating logic in HTML i.e changing the SAME HTML file to look differently with
    changing values.
  - <%= %> : tag for passing values
  - <% %> : tag for adding javascript control flow like if,else,switch and while. Works on a line by line basis and
      u have to surround only ur javascript code and not html and also put tags for every line even though two lines
      are of the same code.
  - JAVASCRIPT SCOPE CONCEPT:
    - VAR varibales declared under if,FOR,WHILE OR ANY BLOCK OF CODE THAT HAS CURLY BRACES can be accessed even outside the brackets
    - ITS SAFER TO USE LET INSTAEAD OF VAR.
  - LAYOUTS OR PARTIALS:
    -file of code which is to remain same in every pages of .ejs type files.
    - included in .ejs files by:
        <%- include("layoutName")-%>
  - JAVASCRIPT EXPORTS:
      - Help us to use functions from other .js files or MODULEs by requiring them as any other npm module
================================================================================================================================================

SECTION 23 : Boss Level Challenge 3 -> BLOG WEBSITE
 - If u don't have node modules installed locally for a project but u do have the json package then u can just
   download them by typing in the terminal:
    npm install
 - Express Route Parameters : https://expressjs.com/en/guide/routing.html
